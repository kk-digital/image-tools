import hashlib
import os
import random
from PIL import Image

class Utils: 
    def __init__(self) -> None:
        pass
    
    @staticmethod
    def image_metadata(image_path: str, hashing_type: str) -> str: 
        """TODO docs 
        """    
        return Utils.compute_hash(Image.open(image_path).tobytes(), hashing_type)
    
    @staticmethod
    def get_random_sample(source: list, sample_size: int = 16, seed: int = None) -> list: 
        """TODO document the method. 
        """
        
        #if the seed was specified by the user. 
        if seed is not None:         
            #define the seed generated by the user. 
            random.seed(seed)
        
        #return the random sample from the source with the specified sample size.
        return random.sample(source, min(sample_size , len(source)))
    
    @staticmethod
    def get_files_list(directory: str) -> list[str]: 
        """TODO document the method. 
        """
        return [{'url': file_name} for file_name in os.listdir(directory)]
    
    @staticmethod
    def compute_hash(object: bytes, hashing_type: str) -> str: 
        """TODO document the method. 
        """
        #make sure the received object is an instance of bytes. 
        assert isinstance(object, bytes)
        
        #Check the chosen hashing type. 
        if hashing_type == 'blake2b': 
            return hashlib.blake2b(object).hexdigest()
        elif hashing_type == 'sha256':
            return hashlib.sha256(object).hexdigest()
        else: 
            raise Exception("{} hashing type is not found only blake2b & sha256 are supported.")